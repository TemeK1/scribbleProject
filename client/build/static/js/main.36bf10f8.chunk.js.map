{"version":3,"sources":["assets/images/cancelNote.png","assets/images/synchronizeNotes.png","assets/images/arrowUp.png","assets/images/arrowDown.png","assets/images/editNote.png","assets/images/removeNote.png","assets/images/scribbleSquare.png","assets/images/addNote.png","components/interface/Note.js","components/interface/Comparison.js","components/functions/syncDownload.js","components/functions/syncUpload.js","components/interface/Synchronize.js","components/functions/handleLocalStorage.js","components/functions/noteTemplate.js","assets/colors/color.js","components/interface/Notes.js","components/functions/calcPosition.js","components/functions/sortNotes.js","components/functions/calcOrder.js","components/interface/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","props","title","JSON","parse","stringify","text","color","state","active","changeOrder","bind","click","delete","handleChange","handleSubmit","onDragstart","onDragStart","setActivity","this","setState","e","order","stopPropagation","time","obj","target","field","name","value","newstate","type","id","trim","length","setCustomValidity","preventDefault","note","onSubmit","dataTransfer","setData","getAttribute","colors","c","checked","push","className","key","style","backgroundColor","onChange","noteClass","content","onClick","src","cancelNote","alt","width","height","removeNote","editNote","border","rows","cols","arrowUp","arrowDown","draggable","top","left","React","Component","Comparison","textRemote","warning","titleRemote","Fragment","syncDownload","API","clonedNotes","a","maximumOrder","fetch","then","response","json","data","notes","map","item","find","lastEdited","colorRemote","leftRemote","topRemote","orderRemote","timeRemote","lastEditedRemote","console","log","syncUpload","WRITE","prioritizeLocal","requestOptions","method","headers","body","Synchronize","reveal","swap","synchronize","upload","uploadNotes","api","updateItem","updateNotes","confirmation","write","window","confirm","renderNotes","warningCount","message","synchronizeNotes","marginLeft","marginRight","status","handleLocalStorage","Storage","prototype","getObj","getItem","setObj","setItem","n","localStorage","i","isNaN","j","splice","noteTemplate","joke","Math","floor","random","Notes","clonedColors","loadNotes","hideNotes","addNew","dragOver","fetchRandomColor","notesVisibility","onDrop","error","newNote","Date","Array","isArray","maxOrder","max","apply","o","getTime","visibility","parseInt","getData","x","y","innerHeight","innerWidth","calcPosition","clientX","clientY","direction","sort","b","sortNotes","calcOrder","syncDelete","removeItem","onDragOver","scribbleSquare","addNote","About","creator","text2","email","website","graphics","href","rel","about","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.36bf10f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancelNote.f96fac30.png\";","module.exports = __webpack_public_path__ + \"static/media/synchronizeNotes.098e0e7c.png\";","module.exports = __webpack_public_path__ + \"static/media/arrowUp.90a260a2.png\";","module.exports = __webpack_public_path__ + \"static/media/arrowDown.2752e169.png\";","module.exports = __webpack_public_path__ + \"static/media/editNote.93d10a4a.png\";","module.exports = __webpack_public_path__ + \"static/media/removeNote.4cededdd.png\";","module.exports = __webpack_public_path__ + \"static/media/scribbleSquare.15fee675.png\";","module.exports = __webpack_public_path__ + \"static/media/addNote.29fb74cd.png\";","import React from 'react';\n\n// Import Images\nimport arrowUp from '../../assets/images/arrowUp.png';\nimport arrowDown from '../../assets/images/arrowDown.png';\nimport cancelNote from '../../assets/images/cancelNote.png';\nimport editNote from '../../assets/images/editNote.png';\nimport removeNote from '../../assets/images/removeNote.png';\n\n/*\n* Component for individual Notes.\n*/\nclass Note extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let title = JSON.parse(JSON.stringify(this.props.title)),\n        text = JSON.parse(JSON.stringify(this.props.text)),\n        color = JSON.parse(JSON.stringify(this.props.color));\n\n    this.state = {\n      active: false,\n      title: title,\n      text: text,\n      color: color\n    }\n\n    this.changeOrder = this.changeOrder.bind(this);\n    this.click = this.click.bind(this);\n    this.delete = this.delete.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onDragstart = this.onDragStart.bind(this);\n    this.setActivity = this.setActivity.bind(this);\n  }\n\n  /*\n  * To \"activate\" this Note to receive User Input.\n  */\n  click() {\n    if (!this.state.active) this.setState({active:true});\n  }\n\n  /*\n  * This is used when a small arrow is clicked to swap the position of this note.\n  */\n  changeOrder(e, order) {\n    e.stopPropagation();\n    this.props.changeOrder(order, this.props.order);\n  }\n\n  /*\n  * To swap between TWO states of this note's visibility.\n  * It's either visible or not.\n  */\n  setActivity() {\n    this.setState({active: !this.state.active});\n  }\n\n  /*\n  * This is used when the trashcan is clicked.\n  * To remove note.\n  * Calls to callback function of Notes Component.\n  */\n  delete(e) {\n    e.stopPropagation();\n    this.props.delete(this.props.time);\n  }\n\n  /*\n  * To prehandle and prevalidate edits of this specific Note.\n  * More decent validation SHOULD occur in API ENDPOINT.\n  */\n  handleChange(e) {\n    let obj = e.target,\n        field = obj.name,\n        value = obj.value,\n        type = obj.type,\n        newstate = {};\n\n    // To validate text and title fields.\n    if (type === 'text' || obj.id === \"text\") {\n      if (value.trim().length < 3) {\n        obj.setCustomValidity(\"Too short, at least three characters are required\");\n      } else {\n        obj.setCustomValidity(\"\");\n      }\n      newstate[field] = value;\n\n      this.setState(newstate);\n      return;\n    }\n\n    this.setState(newstate);\n  }\n\n  /*\n  * When the form is submitted, we will use\n  * callback function onSubmit here. Notes Component\n  * will take care of the rest.\n  */\n  handleSubmit(e) {\n    e.preventDefault();\n    let note = JSON.parse(JSON.stringify({\n      title: this.state.title,\n      text: this.state.text,\n      time: this.props.time,\n      color: this.state.color\n    }));\n    this.props.onSubmit(note);\n    this.setActivity();\n  }\n\n  /*\n  * To transport an order value of dragged Note via dataTransfer.\n  */\n  onDragStart(e) {\n    e.dataTransfer.setData(\"text/plain\", e.target.getAttribute(\"id\"));\n  }\n\n  render() {\n    let color = [];\n\n    if (this.state.active) {\n      // Color options will only be displayed when this note is active.\n      for (let c of this.props.colors) {\n        let checked = false;\n        if (this.state.color === c.color) {\n          checked = true;\n        }\n\n        color.push(<div className=\"radioColor\" key={c.color} id={c.color} style={{backgroundColor: '#' + c.color}}><input type=\"radio\" name=\"color\" checked={checked} value={c.color} onChange={() => {this.setState({color: c.color})}} /></div>);\n      }\n    }\n    let noteClass = this.state.active ? \"Note NoteActive\" : \"Note\";\n    let content = this.state.active ?\n    // This editable version will be rendered if the note is active\n    <div>\n    <form className=\"Edit\" onSubmit={this.handleSubmit}>\n    <div className=\"noteOptions\">\n    <div id=\"cancel\" onClick={() => this.setActivity()}><img src={cancelNote} alt=\"Cancel\" title=\"Cancel\" width=\"32\" height=\"32\" /></div>\n    <div id=\"delete\" onClick={e => this.delete(e)}><img src={removeNote} alt=\"Delete\" title=\"Delete\" width=\"32\" height=\"32\" /></div>\n    <input type=\"image\" src={editNote} className=\"Edit\" width=\"32\" height=\"32\" alt=\"Edit\" title=\"Edit\"></input>\n    </div>\n    <input type=\"text\" id=\"title\" name=\"title\" value={this.state.title} onChange={this.handleChange} style={{backgroundColor: '#' + this.state.color, border: '0px'}}/>\n    <textarea rows=\"5\" cols=\"20\" id=\"text\" name=\"text\" value={this.state.text} onChange={this.handleChange} style={{backgroundColor: '#' + this.state.color, border: '0px'}} />\n    <div className=\"colors\">{color}</div>\n    </form>\n    </div>:\n    // This non-editable version will be rendered if the note is not active\n    <div className=\"nonActive\">\n    <div className=\"Title\">{this.props.title}</div><div className=\"Text\">{this.props.text}</div>\n    <div className=\"arrows\">\n    <div id=\"arrowUp\" onClick={(e) => this.changeOrder(e, 1)}><img src={arrowUp} alt=\"Arrow up\" width=\"32\" height=\"32\"/></div>\n    <div id=\"arrowDown\" onClick={(e) => this.changeOrder(e, 0)}><img src={arrowDown} alt=\"Arrow down\" width=\"32\" height=\"32\" /></div>\n    </div>\n    </div>;\n\n    try {\n      return (\n        <div id={this.props.time} order={this.props.order} draggable=\"true\" className={noteClass}\n        style={{backgroundColor: '#' + this.state.color, top: this.props.top + '%',\n        left: this.props.left + '%', order: this.props.order}} onDragStart={this.onDragStart} onClick={this.click}>\n            {content}\n        </div>);\n    } catch(e) {\n      return (<div>Error occurred!</div>);\n    }\n  }\n}\n\nexport default Note;\n","import React from 'react';\n\n/*\n* To compare two similar Notes, for user to decide if he wants to override mismatching remote notes or not.\n* This does nothing else; just for visual aid.\n*/\nclass Comparison extends React.Component {\n\n  render() {\n    let textRemote = [] ;\n\n    // If there is a mismatch,\n    // we highlight the remote note with red backgroundColor\n    if (this.props.warning) {\n      textRemote.push(<td style={{ backgroundColor: \"green\" }}>{this.props.text}</td>);\n      textRemote.push(<td style={{ backgroundColor: \"red\" }}>{this.props.textRemote}</td>);\n      textRemote.push(<td><span style={{ backgroundColor: \"green\" }}>{this.props.title}</span> => <span style={{ backgroundColor: \"red\" }}> {this.props.titleRemote}</span></td>);\n    }\n\n    return (\n      <React.Fragment>\n      <tr>\n      {textRemote}\n      <td>{this.props.time}</td>\n      </tr>\n      </React.Fragment>);\n  }\n}\n\nexport default Comparison;\n","/*\n* Purpose is to fetch all the notes, combine them with existing notes,\n* and to set the attribute \"warning\" and comparison attributes (local & remote) in case mismatches are found between local and remote notes.\n* Last edit timestamp in milliseconds difference will tell us if there is a mismatch.\n* We make sure (await) to have all the results before we proceed, just so that logic of the app would stay intact.\n* @API url of API to feth messages\n* @clonedNotes currently existing local notes\n*/\nexport async function syncDownload(API, clonedNotes) {\n  try {\n    let maximumOrder = 1;\n    // Helps to make sure we won't have duplicate order numbers\n    for (let note of clonedNotes) {\n      note.order = maximumOrder;\n      maximumOrder++;\n    }\n\n    await fetch(API)\n      .then(response => response.json())\n      .then(data => data.notes.map(item => {\n        if (!clonedNotes.find(function(note) {\n            return note.time === item.time;\n          })) {\n\n          // Let's push all the notes to array that we do not have locally yet.\n          clonedNotes.push({\n            time: item.time,\n            lastEdited: item.lastEdited,\n            order: maximumOrder,\n            top: item.top,\n            left: item.left,\n            color: item.color,\n            title: item.title,\n            text: item.text,\n            // We didn't have this Note locally yet, so there is no need to warn anyone.\n            warning: false\n          });\n\n        } else {\n\n          let note = clonedNotes.find(function(note) {\n            return note.time === item.time\n          })\n\n          // If remote note has been edited more recently\n          if (item.lastEdited > note.lastEdited) {\n            note.titleRemote = item.title;\n            note.textRemote = item.text;\n            note.colorRemote = item.color;\n            note.leftRemote = item.left;\n            note.topRemote = item.top;\n            note.orderRemote = maximumOrder;\n            note.timeRemote = item.time;\n            note.lastEditedRemote = item.lastEdited;\n            note.warning = true;\n          } else {\n            // If not, we can remote warning immediately\n            note.warning = false;\n            note.order = maximumOrder;\n          }\n        }\n        maximumOrder++\n      }));\n\n  } catch (error) {\n    console.log(error);\n  }\n  return clonedNotes;\n}\n","/*\n* To make sure that all the notes are uploaded (fetch, method: 'POST') to the endpoint.\n* One by one.\n* We make sure (await) to have all the results before we proceed, just so that logic of the app would stay intact.\n* @API url of API to feth messages\n* @WRITE extension of API url path for writing/editing\n* @notes currently existing local notes\n* @prioritizeLocal to indicate whether local or remote more recent edits should be favored.\n*/\nexport async function syncUpload(API, WRITE, notes, prioritizeLocal) {\n\n  try {\n    if (prioritizeLocal === 1) {\n      for (let note of notes) {\n\n        let requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            time: note.time,\n            lastEdited: note.lastEdited,\n            left: note.left,\n            top: note.top,\n            title: note.title,\n            text: note.text,\n            color: note.color,\n            order: note.order\n          })\n        };\n\n        if (note.warning === true) {\n          // Hence we do not care about mismatch (we prefer local  recent edits), we can already remote so called\n          // remote attributes from object. And warning itself as well.\n          delete note.titleRemote;\n          delete note.textRemote;\n          delete note.colorRemote;\n          delete note.orderRemote;\n          delete note.lastEditedRemote;\n          delete note.timeRemote;\n          delete note.leftRemote;\n          delete note.topRemote;\n          delete note.warning;\n        }\n\n        // Here we use POST method to transfer one Note to the ENDPOINT, and wait to make sure.\n        await fetch(API + WRITE, requestOptions)\n          .then(response => response.json())\n          .then(data => console.log(data));\n      }\n    } else {\n      for (let note of notes) {\n        // Here we chose to prefer remote recent edits so let's store data of those attributes first, per note!\n        if (note.warning === true) {\n          note.title = note.titleRemote;\n          note.text = note.textRemote;\n          note.color = note.colorRemote;\n          note.text = note.textRemote;\n          note.left = note.leftRemote;\n          note.top = note.topRemote;\n          delete note.titleRemote;\n          delete note.textRemote;\n          delete note.colorRemote;\n          delete note.orderRemote;\n          delete note.lastEditedRemote;\n          delete note.timeRemote;\n          delete note.leftRemote;\n          delete note.topRemote;\n          delete note.warning;\n        }\n\n        let requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            time: note.time,\n            lastEdited: note.lastEdited,\n            left: note.left,\n            top: note.top,\n            title: note.title,\n            text: note.text,\n            color: note.color,\n            order: note.order\n          })\n        };\n        // Here we use POST method to transfer one Note to the ENDPOINT, and wait to make sure.\n        await fetch(API + WRITE, requestOptions)\n          .then(response => response.json())\n          .then(data => console.log(data));\n      }\n\n    }\n\n  } catch (error) {\n    console.log(error);\n  }\n\n  return notes;\n}\n","import React from 'react';\nimport Comparison from './Comparison.js';\n\n// Import Functions\nimport {syncDownload} from '../functions/syncDownload.js';\nimport {syncUpload} from '../functions/syncUpload.js';\n\n// Import Pictures\nimport synchronizeNotes from '../../assets/images/synchronizeNotes.png';\n\n/*\n* To synchronize notes.\n* Here we look for mismatches between local (client) and remote (endpoint) edits.\n* And synchronize local and remote Notes.\n* In case of a mismatch user is prompted to choose whether he would like to prioritize\n* more recent local or remote edits.\n*/\nclass Synchronize extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      reveal: false,\n      notes: [...this.props.notes]\n    }\n\n    this.swap = this.swap.bind(this);\n    this.synchronize = this.synchronize.bind(this);\n    this.upload = this.upload.bind(this);\n  }\n\n  /*\n  * Here we call two functions to synchronize notes between the client and endpoint.\n  */\n  async synchronize() {\n    let uploadNotes = true;\n    // Swap the visibility of this Component for the enduser.\n    this.swap();\n    // We wait until we have downloaded all the remote notes.\n    let clonedNotes = await syncDownload(this.props.api, [...this.props.notes]);\n\n\n    for (let note of clonedNotes) {\n      // If we find even one note with a mismatch warning, we won't\n      // immediately upload our local notes!!\n      if (note.warning === true) {\n        uploadNotes = false;\n        break;\n      }\n    }\n\n    this.setState({\n      notes: clonedNotes\n    }, function() {\n      this.updateItem(this.state);\n    }.bind(this));\n\n    // We proceed to upload immediately if there were no warnings.\n    if (uploadNotes === true) {\n      this.upload(1);\n    }\n\n    // Callback to Notes.js\n    this.props.updateNotes(clonedNotes);\n  }\n\n  /*\n  * We upload local Notes to the endpoint...\n  */\n  async upload(confirmation) {\n    //... the magic happens here\n    let notes = await syncUpload(this.props.api, this.props.write, [...this.state.notes], confirmation);\n\n    // After successful sync Operation we also update the state\n    this.setState({\n      notes: notes\n    }, function() {\n      this.updateItem(this.state);\n    }.bind(this));\n\n    // Callback to Notes to update Note-elements for the enduser.\n    this.props.updateNotes(notes);\n\n    // The deed is done.\n    if (confirmation === 1) {\n      window.confirm(\"Synchronization successful (local recent notes prioritized)\");\n    } else {\n      window.confirm(\"Synchronization successful (remote recent notes prioritized)\");\n    }\n\n  }\n\n  /*\n  * This is called upon to make sure that updates are not lacking behind\n  * \"by one step\" due to asynchronious nature of ReactJS states.\n  */\n  updateItem() {\n    this.setState(this.state);\n  }\n\n  /*\n  * SWAP for this.state.reveal which\n  * indicates IF the content IS VISIBLE OR NOT.\n  */\n  swap() {\n    if (this.state.reveal === false) {\n      this.setState({reveal: true},\n        function() {\n        this.updateItem(this.state);\n        }.bind(this));\n    } else {\n      this.setState({reveal: false},\n        function() {\n        this.updateItem(this.state);\n        }.bind(this));\n    }\n\n  }\n\n  render() {\n\n    let renderNotes = [];\n    let warningCount = 0;\n    if (this.state.reveal) {\n\n      for (let note of this.state.notes) {\n        // We will warn the user if there is a mismatch.\n        if (note.warning === true) {\n          warningCount++;\n          renderNotes.push(<Comparison color={note.color}\n            order={note.order} time={note.time} lastEdited={note.lastEdited} title={note.title} text={note.text}\n            top={note.top} left={note.left}  colorRemote={note.colorRemote}\n            orderRemote={note.orderRemote} timeRemote={note.timeRemote} lastEditedRemote={note.lastEditedRemote}\n            titleRemote={note.titleRemote} textRemote={note.textRemote}\n            topRemote={note.topRemote} leftRemote={note.leftRemote} warning={note.warning} key={note.time} />);\n        }\n      }\n\n    }\n\n    // User will see the warning message and is also prompted to choose whether he likes to prioritize more recent local or remote edits\n    let message = renderNotes.length ? \"WARNING! Some of the remote content might have been edited more recently than your local notes. If you confirm to sync Notes between the browser and the endpoint database, you will lose some remote content (a text with red background). Press 'Prioritize local edits' to proceed to syncronize and to upload all the notes to the database, OR 'Prioritize remote edits' to keep the most recent remote edits (YOU WILL LOSE OLDER LOCAL GREEN ONES). This action is irreversible. Keep on mind that apart from these mismatches everything else will be syncronized in such a way that all the notes can be similarly found both from the client and database. In situations where you only use this app through a browser client, it is typically enough to choose 'Priotize local edits'\" : \"\";\n\n    // We render this if the content is visible.\n    let content = this.state.reveal && warningCount > 0 ?\n    <div>\n    <div><input type=\"image\" src={synchronizeNotes} className=\"synchronize\" width=\"48\" height=\"48\" alt=\"Synchronize notes with database\" title=\"Synchronize notes with database\" onClick={() => this.synchronize()}></input></div>\n    <div className=\"aboutLayer\">\n    <h2>Remote database contains more recent edits!</h2>\n    <table>\n    <thead>\n    <tr><th>Local Text</th><th>Remote Text</th><th>Title, local => remote</th><th>Unique ID</th></tr>\n    </thead>\n    <tbody>\n    {renderNotes}\n    </tbody>\n    </table>\n    <div style={{ marginLeft: \"2vw\", marginRight: \"2vw\"}}>{message}</div>\n    <div className=\"syncButtons\">\n    <button className=\"tallennus\" onClick={() => this.upload(1)}>Prioritize local edits</button>\n    <button className=\"tallennus\" onClick={() => this.upload(0)}>Prioritize remote edits</button>\n    {this.props.status}\n    </div>\n    </div>\n    </div> :\n    // And this if the content is not visible.\n    <div><input type=\"image\" src={synchronizeNotes} className=\"synchronize\" width=\"48\" height=\"48\" alt=\"Synchronize notes with database\" title=\"Synchronize notes with database\" onClick={() => this.synchronize()}></input></div>;\n\n    return <div>{content}</div>;\n  }\n}\n\nexport default Synchronize;\n","/*\n* This function sets new notes on localStorage, and also fetches old notes from it.\n* @param notes currently loaded notes\n* @return array containing all notes (also ones from localStorage)\n*/\nexport function handleLocalStorage(notes) {\n  // How to get object from localStorage\n  Storage.prototype.getObj = function(key) {\n    return JSON.parse(this.getItem(key));\n  }\n\n  // How to set object to localStorage\n  Storage.prototype.setObj = function(key, obj) {\n    return this.setItem(key,(obj));\n  }\n\n  // First we set all Note objects to localStorage\n  // Unique Timestamp of Note creation functions as a key,\n  // No duplicates will occur.\n  for (let n of notes) {\n    localStorage.setObj(n.time, JSON.stringify({\n        time: n.time,\n        lastEdited: n.lastEdited,\n        order: n.order,\n        title: n.title,\n        text: n.text,\n        left: n.left,\n        top: n.top,\n        color: n.color\n      }));\n  }\n\n  // We get all the Note data from localStorage.\n  for (let i = 0; i < localStorage.length; i++) {\n    let obj = localStorage.getObj(localStorage.key(i));\n    // Only if time attribute IS a number\n    if (isNaN(obj.time) === false) {\n        notes.push({\n          time: obj.time,\n          lastEdited: obj.lastEdited,\n          order: obj.order,\n          title: obj.title,\n          text: obj.text,\n          left: obj.left,\n          top: obj.top,\n          color: obj.color\n        });\n    }\n  }\n\n  // Well, could probably do this better but this is my way of\n  // making sure that there ain't no duplicates in localStorage and volatile browser memory\n  for (let i = 0; i < notes.length; i++) {\n    for (let j = notes.length -1; j > i; j--) {\n      if (notes[i].time === notes[j].time) {\n        notes.splice(j, 1);\n      }\n    }\n  }\n\n  // Array of Note objects\n  return notes;\n\n}\n","/*\n* Template for a new note\n* @param time unique creation timestamp to identify a new note\n* @param order in what order the note is supposed to be rendered\n* @color background color\n* @joke random template text of note, if API is available. Otherwise we use a standard message.\n* @return object Note template\n*/\nexport function noteTemplate(time, order, color, joke) {\n  return {\n    time: time,\n    lastEdited: time,\n    order: order,\n    title: \"sample title\",\n    text: joke,\n    left: Math.floor(Math.random() * 70),\n    top: 12 + Math.floor(Math.random() * 50),\n    color: color\n  }\n}\n","export var colors = [\n  {\n    // Thistle\n    \"color\": \"E0BBE4\"\n  },\n  {\n    // Lavender Purple\n    \"color\": \"957DAD\"\n  },\n  {\n    // Light Moss Green\n    \"color\": \"AFD5AA\"\n  },\n  {\n    // Pearl Aqua\n    \"color\": \"87DCC0\"\n  },\n  {\n    // Dark Sky Blue\n    \"color\": \"83C6DD\"\n  },\n  {\n    // Cerulean Frost\n    \"color\": \"6891C3\"\n  },\n  {\n    // Lumber\n    \"color\": \"FFDFD3\"\n  },\n  {\n    // Light coral\n    \"color\": \"F47C7C\"\n  },\n  {\n    // Flavescent\n    \"color\": \"F7F48B\"\n  },\n  {\n    // Granny Smith Apple\n    \"color\": \"A1DE93\"\n  },\n  {\n    // Little Boy Blue\n    \"color\": \"70A1D7\"\n  }\n]\n","import React from 'react';\nimport Note from './Note.js';\nimport Synchronize from './Synchronize.js';\n\n// Import Functions\nimport {sortNotes} from '../functions/sortNotes.js';\nimport {calcOrder} from '../functions/calcOrder.js';\nimport {calcPosition} from '../functions/calcPosition.js';\nimport {handleLocalStorage} from '../functions/handleLocalStorage.js';\nimport {noteTemplate} from '../functions/noteTemplate.js';\n\n// Import Colors\nimport {colors} from '../../assets/colors/color.js';\n\n// Import Images\nimport scribbleSquare from '../../assets/images/scribbleSquare.png';\nimport addNote from '../../assets/images/addNote.png'\n\n// API Constants\nconst API = \"https://scribble2000endpoint.oa.r.appspot.com/notes\"; // Base address...\nconst WRITE = \"/write/\"; // ...for Writing and Editing\nconst DELETE = \"/delete/\"; // ... for Deleting\nconst JOKE = \"https://sv443.net/jokeapi/v2/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist&type=single\";\n\n/*\n* Primary interface component of the application.\n* Responsible for handling API connections, and rendering and handling single notes.\n* Through and through the time attribute (Note creation time in milliseconds since 1970) works as a unique identificator for a single note.\n*/\nclass Notes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let clonedColors = JSON.parse(JSON.stringify(colors));\n    let loadNotes = handleLocalStorage([]);\n\n    this.state = {\n      notes: loadNotes,\n      colors: clonedColors,\n      hideNotes: false\n    }\n\n    this.addNew = this.addNew.bind(this);\n    this.delete = this.delete.bind(this);\n    this.dragOver = this.dragOver.bind(this);\n    this.fetchRandomColor = this.fetchRandomColor.bind(this);\n    this.notesVisibility = this.notesVisibility.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.order = this.order.bind(this);\n    this.updateNotes = this.updateNotes.bind(this)\n  }\n\n  /*\n  * This is called upon when an individual note is removed.\n  * With this we immediately make sure that the Note is also removed from the endpoint DATABASE, and not only from the client-side.\n  */\n  syncDelete(time) {\n    try {\n      fetch(API + DELETE + time)\n      .then(response => response.json())\n      .then(data => console.log(data));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*\n  * This is called upon to make sure that updates are not lacking behind\n  * \"by one step\" due to asynchronious nature of ReactJS states.\n  */\n  updateItem() {\n    this.setState(this.state);\n  }\n\n  /*\n  * Responsible for handling the creation process of a new note\n  */\n  async addNew() {\n    let newNote = {};\n    // This timestamp will be used to get a unique timestamp for the new note\n    let time = new Date();\n    let color = this.fetchRandomColor();\n    // if we can't succesfully fetch the JOKE API, we use this as a template message\n    let joke = 'sample message';\n\n    try {\n      // First we see if we manage to find A GREAT JOKE\n      joke = await this.joke();\n    } catch(error) {\n      console.error(error);\n    }\n\n    // If we already have some notes..\n    if (Array.isArray(this.state.notes) && this.state.notes.length) {\n      let maxOrder = Math.max.apply(Math,this.state.notes.map(function(o){return o.order;}));\n      newNote = noteTemplate(time.getTime(), maxOrder+1, color, joke);\n      // If we don't...\n    } else {\n      newNote = noteTemplate(time.getTime(), 1, color, joke);\n    }\n\n    // And update whatever needs to be updated (state, localStorage)\n    let clonedNotes = [...this.state.notes];\n    clonedNotes.push(newNote);\n    clonedNotes = handleLocalStorage(clonedNotes);\n    this.setState({ notes: clonedNotes },\n      function() {\n      this.updateItem(this.state);\n      }.bind(this));\n  }\n\n  /*\n  * Function for fetching a random PROGRAMMING JOKE from JOKE API\n  */\n  async joke() {\n    try {\n      const response = await fetch(JOKE, {\n          method: 'GET',\n      });\n\n      const joke = await response.json();\n      return joke.joke;\n    } catch (error) {\n      return \"sample note\";\n    }\n\n  }\n\n  dragOver(e) {\n    e.preventDefault();\n  }\n\n  /*\n  * Callback function (used from Synchronize Component)\n  * Just to indicate if Notes should be rendered at the moment or not.\n  */\n  notesVisibility(visibility) {\n    this.setState({\n      hideNotes: visibility\n    });\n  }\n\n  /*\n  * Fetching random color from available colors options (this.state.colors)\n  */\n  fetchRandomColor() {\n    let random = Math.floor(Math.random() * this.state.colors.length);\n    return JSON.parse(JSON.stringify(this.state.colors[random].color));\n  }\n\n  /*\n  * This will be called when a Note is dragged and then dropped on wide screen edition\n  */\n  onDrop(e) {\n    e.preventDefault();\n    // Order number of dragged note is parsed from dataTransfer.\n    let time = parseInt(e.dataTransfer.getData(\"text/plain\"));\n    let clonedNotes = [...this.state.notes];\n    // We call calcPosition to calculate an absolute top- and left position for dragged note\n    clonedNotes = calcPosition(clonedNotes, e.clientX, e.clientY, time);\n\n    // Make sure changes are stored...\n    clonedNotes = handleLocalStorage(clonedNotes);\n    this.setState({ notes: clonedNotes });\n\n  }\n\n  /*\n  * When a little up or down arrow is clicked (in Note component),\n  * This function will be called as a callback.\n  */\n  order(direction, order) {\n    // First we sort notes to make absolutely sure they are in Descending order.\n    let notes = sortNotes([...this.state.notes], false);\n    // Then we swap positions of two notes.\n    notes = calcOrder(direction, order, notes);\n\n    // To make sure changes are stored...\n    notes = handleLocalStorage(notes);\n    this.setState({ notes: notes });\n  }\n\n  /*\n  * Callback function for when individual Note\n  * is edited and submitted.\n  */\n  onSubmit(note) {\n    let clonedNotes = [...this.state.notes];\n\n    for (let n of clonedNotes) {\n      if (n.time === note.time) {\n        n.text = note.text;\n        n.title = note.title;\n        n.color = note.color;\n        n.lastEdited = new Date().getTime();\n      }\n    }\n\n    // To make sure changes are stored...\n    clonedNotes = handleLocalStorage(clonedNotes);\n    this.setState({ notes: clonedNotes },\n      function() {\n      this.updateItem(this.state);\n      }.bind(this));\n  }\n\n  /*\n  * Callback function (used from Synchronize Component)\n  * Makes sure that the after the syncronization\n  * edits are mirrored to the component's state and localStorage.\n  */\n  updateNotes(notes) {\n    notes = handleLocalStorage(notes);\n    this.setState({ notes: notes, active: true },\n      function() {\n        this.updateItem(this.state);\n      }.bind(this));\n  }\n\n  /*\n  * To remove an individual node from the client-side.\n  */\n  delete(time) {\n    let confirmRemove = window.confirm(\"Do you want to remove the note?\");\n    if (confirmRemove) {\n      let clonedNotes = [...this.state.notes];\n      for (let i = 0; i < clonedNotes.length; i++) {\n        if (clonedNotes[i].time === time) {\n          // We first synchronize the deletion with the ENDPOINT DATABASE..\n          this.syncDelete(clonedNotes[i].time);\n          // Then we make sure to remove it from localStorage as well...\n          localStorage.removeItem(clonedNotes[i].time);\n          // And lastly splice it off from the array..\n          clonedNotes.splice(i, 1);\n          break;\n        }\n      }\n      // ...and UPDATE the state.\n      this.setState({ notes: clonedNotes });\n    }\n  }\n\n  render() {\n\n    let notes = [...this.state.notes];\n    let renderNotes = [];\n\n    if (!this.state.hideNotes) {\n      for (let note of notes) {\n        renderNotes.push(<Note changeOrder={this.order} delete={this.delete} colors={this.state.colors}\n          order={note.order} time={note.time} title={note.title} onSubmit={this.onSubmit} text={note.text} color={note.color}\n          top={note.top} left={note.left} key={note.time} />);\n      }\n    }\n\n    try {\n      return (\n        <div className=\"Full\" onDrop={e => this.onDrop(e)} onDragOver={e => this.dragOver(e)}>\n        <div className=\"headerRow\">\n        <Synchronize api={API} write={WRITE} notes={this.state.notes} updateNotes={this.updateNotes} notesVisibility={this.notesVisibility} />\n          <div id=\"logo\"><img src={scribbleSquare} alt=\"Scribble 2000\" width=\"48\" height=\"48\" /> <h1>Scribble 2000</h1></div>\n          <input type=\"image\" src={addNote} className=\"add\" title=\"Add new Note\" width=\"48\" height=\"48\" alt=\"Add Note\" onClick={this.addNew}></input>\n        </div>\n        <div id=\"flex\">{renderNotes}</div>\n        </div>);\n    } catch(e) {\n      return (<div>Error occurred!</div>);\n    }\n  }\n\n}\n\nexport default Notes;\n","/*\n* Calculates a new top- and left position for a dragged note based in innerHeight and innerWidth,\n* and updates the correct object of array\n* @param notes array of note objects\n* @param x x-coordinate of dragged note\n* @param y y-coordinate of dragged note\n* @param time unique timestamp of a note in question\n* @return array of note objects with updated top- and left- attribute\n*/\nexport function calcPosition(notes, x, y, time) {\n\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i].time === time) {\n      // When right one is found, we calculate new position based on innerHeight & innerWidth\n      let top = (y / window.innerHeight) * 100;\n      let left = (x / window.innerWidth) * 100;\n      notes[i].top = top;\n      notes[i].left = left;\n    }\n  }\n  // Updated array of note objects\n  return notes;\n}\n","/*\n* Sorting all notes based on their order attribute\n* @notes array of Note objects\n* @return array of Note objects in descending order.\n*/\nexport function sortNotes(notes) {\n  notes.sort(function(a, b) {\n    if (a.order < b.order) return 1;\n    if (a.order > b.order) return -1;\n    return 0;\n  });\n\n  return notes;\n}\n","/*\n* Swaps the order of two notes.\n* @direction 1 == note should go \"up\", 0 == note should go \"down\"\n* @order order number of transported note\n* @notes all notes\n* @return array of note objects with updated order attribute\n*/\nexport function calcOrder(direction, order, notes) {\n\n  // If we go \"up\"\n  if (direction === 1) {\n    for (let i = notes.length -1; i > 0; i--) {\n      if (notes[i].order === order) {\n        // When right one is found, we swap positions of it and the previous note\n        notes[i].order = notes[i-1].order;\n        notes[i-1].order = order;\n        break;\n      }\n    }\n    // If we go \"down\"\n  } else {\n    for (let i = 0; i < notes.length -1; i++) {\n      if (notes[i].order === order) {\n         // When right one is found, we swap positions of it and the subsequent note\n         notes[i].order = notes[i+1].order;\n         notes[i+1].order = order;\n         break;\n      }\n    }\n  }\n  // Updated array of note objects\n  return notes;\n}\n","import React from 'react';\n\n// Import Images\nimport cancelNote from '../../assets/images/cancelNote.png';\n\n/*\n* Just a simple Component for rendering about\n* details of the App for the end user to see.\n*/\nclass About extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      creator: '-Teemu \"TemeKK1\" Käpylä',\n      text: \"Thank you for using Scribble 2000. It is very simple, but yet, powerful application for scribbling notes that add some spice and color on your life.\",\n      text2: \"If you have ideas, suggestions, feedback or whatsoever, feel free to contact me via email. Copyright for pictures belongs to Arjane. Feel free to check her blog.\",\n      email: 'contact@teemukapyla.dev',\n      website: 'https://www.teemukapyla.fi',\n      reveal: false,\n      graphics: \"https://www.arjane.blog\"\n    }\n  }\n\n  /*\n  * SWAP for this.state.reveal which\n  * indicates IF the  content IS VISIBLE OR NOT.\n  */\n  about() {\n    if (this.state.reveal === false) {\n      this.setState({reveal: true});\n    } else {\n      this.setState({reveal: false});\n    }\n\n  }\n\n  render() {\n\n    // We render this if the content is visible.\n    let content = this.state.reveal ?\n    <div className=\"aboutLayer\">\n    <p>{this.state.text}</p>\n    <p>{this.state.text2}</p>\n    <p className=\"address\">{this.state.email}</p>\n    <p className=\"address\"><a href={this.state.website} alt=\"home page\" target=\"_blank\" rel=\"noopener noreferrer\">{this.state.website}</a></p>\n    <p className=\"address\"><a href={this.state.graphics} alt=\"home page\" target=\"_blank\" rel=\"noopener noreferrer\">{this.state.graphics}</a></p>\n    <div className=\"footer\" onClick={() => this.about()}>About Scribble 2000 <img src={cancelNote} alt=\"Return\" title=\"Return\" width=\"32\" height=\"32\" /> </div>\n    </div> :\n    // And this if the content is not visible.\n    <div className=\"footer\" onClick={() => this.about()}>About Scribble 2000</div>;\n\n    return <div>{content}</div>;\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport Notes from './components/interface/Notes.js';\nimport About from './components/interface/About.js';\nimport './assets/style/style.css';\n\n/*\n* TIES504 Erikoistyö.\n* Notes Browser App \"Scribble 2000\". App.js renders two main components: Notes & About.\n*/\nclass App extends React.Component {\n\n render() {\n   return (\n     <div className=\"App\">\n       <Notes />\n       <About />\n     </div>\n   );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}